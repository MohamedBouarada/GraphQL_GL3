type Infos {
  name: String!
  firstname: String!
}
enum Gender {
  MALE
  FEMALE
}
interface isNamed {
    name: String
}
type Student {
  id: ID!
  name: String!
  age: Int!
  gender: Gender!
  classroom: Classroom
}
input AddClassroomInput {
    designation: String!
}
type Classroom {
  id: ID!
  designation: String!
  students: [Student!]
}
type Query {
  hello(name: String): String!
  infos: Infos!
  getAllStudents: [Student]
  getStudent(id: ID!): Student
  getAllTodos: [Todo]
  getTodo(id: ID!): Todo
  getAllUsers: [User]
  getUser(id: ID!): User
 getAllClassroom: [Classroom]
}

input AddTodoInput {
    name: String!
    content: String!
    userID: String

}
input UpdateTodoInput {
    id : ID!
content :String,
    name : String,
    status : TodoStatus
}
input DeleteTodoInput {
    id : ID!
}

type Mutation  {
    addClassroom(addClassroomInput: AddClassroomInput): Classroom
    addTodo(addTodoInput:AddTodoInput) : Todo
    updateTodo(updateTodoInput : UpdateTodoInput) : Todo
    deleteTodo(deleteTodoInput:DeleteTodoInput) : Todo
}

type Subscription {
    newClassroom: Classroom!
    getAllTodos: [Todo]
    getTodo(id:ID!): Todo
    getAllUsers: [User]
    getUser(id:ID!): User
}
enum TodoStatus {
  wait
  in_progress
  postponed
  done
  canceled
}
type Todo {
  id: ID!
  name: String!
  content: String!
  status: TodoStatus!
  user: User
}
type User {
  id: ID!
  name: String!
  email: String!
  todos: [Todo!]
}
